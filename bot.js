const TelegramBot = require('node-telegram-bot-api');
const bot = new TelegramBot("5605925167:AAHEJZgNsc7NyKtcSCfJ1C0emJc5PCvVjNs", { polling: true });
const sqlite3 = require('sqlite3').verbose();
const db = new sqlite3.Database('database.db');
const amqp = require('amqplib');

let chatState = {};
let costnumber;
let payment;
let vivodNumber;
let gamePassLink = '';
let userMessage

bot.on("callback_query", (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    const messageId = callbackQuery.message.message_id;
    if (data === "buyRobux") {
        const message = `–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–±—É–∫—Å–æ–≤ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –∫—É–ø–∏—Ç—å?`;
        bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                            callback_data: "backToMenu"
                        }
                    ]
                ]
            }
        });
        chatState[chatId] = "waitMoneyAmount"
    } else if (data === "calculator") {
        bot.editMessageText("üßÆ –Ø –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä, –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–æ–±—É–∫—Å–æ–≤ \n[–ö—É—Ä—Å —Ä–æ–±—É–∫—Å–æ–≤ -> 1 —Ä—É–± - 1.8 —Ä–æ–±—É–∫—Å–∞]\n", {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–π–º–ø–∞—Å—Å–∞",
                            callback_data: "gamepassCostCalculator",
                        }
                    ],
                    [
                        {
                            text: "–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–æ–±—É–∫—Å–æ–≤",
                            callback_data: "robuxCostCalculator",
                        }
                    ],
                    [
                        {
                            text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                            callback_data: "backToMenu",
                        }
                    ]
                ]
            }
        })
    } else if (data === "giveaway") {
        const userId = callbackQuery.from.id;
        db.get(`SELECT userBalance FROM users WHERE userId = ?`, [userId], function (err, row) {
            if (err) {
                return console.error(err.message);
            }
            const balance = row ? row.userBalance : 0;
            bot.editMessageText(`–í–∞—à —Ç–µ–∫—É—é—â–∏–π –±–∞–ª–∞–Ω—Å —Ä–æ–±—É–∫—Å–æ–≤: ${balance}\n–°–∫–æ–ª—å–∫–æ —Ä–æ–±—É–∫—Å–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏?`, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                                callback_data: "backToMenu"
                            }
                        ]
                    ]
                }
            })
            chatState[chatId] = "vivodMoney"
        })

    } else if (data === "profile") {
        const userId = callbackQuery.from.id;
        db.get(`SELECT userBalance FROM users WHERE userId = ?`, [userId], function (err, row) {
            if (err) {
                return console.error(err.message);
            }
            const balance = row ? row.userBalance : 0;
            const profile = `
üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å: 
üÜî –í–∞—à –∞–π–¥–∏ - ${chatId}
üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å - ${balance} —Ä–æ–±—É–∫—Å–æ–≤
        `
            bot.editMessageText(profile, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                                callback_data: "buyRobux"
                            }
                        ],
                        [
                            {
                                text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                                callback_data: "backToMenu"
                            }
                        ]
                    ]
                }
            })
        })

    } else if (data === "balance") {
        const userId = callbackQuery.from.id;
        db.get(`SELECT userBalance FROM users WHERE userId = ?`, [userId], function (err, row) {
            if (err) {
                return console.error(err.message);
            }
            const balance = row ? row.userBalance : 0;
            bot.editMessageText(`–í–∞—à —Ç–µ–∫—É—é—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance} —Ä–æ–±—É–∫—Å–æ–≤\n –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ –∫–æ–º–∞–Ω–¥–µ –Ω–∏–∂–µ`, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                                callback_data: "backToMenu"
                            }
                        ]
                    ]
                }
            })
        })

    } else if (data === "newsChanel") {
        bot.editMessageText(`–ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª:`, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                            callback_data: "backToMenu"
                        }
                    ]
                ]
            }
        })
    } else if (data === "helpAdmin") {
        bot.editMessageText(`–¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ —Ä–µ–∂–∏–º–µ 24/7 \n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—à–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å–º–æ–≥–ª–∏ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è`, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                            callback_data: "backToMenu"
                        }
                    ]
                ]
            }
        })
    } else if (data === "backToMenu") {
        const message = "–í–æ—Ç –º–æ–µ –º–µ–Ω—é:";
        chatState[chatId] = "userState"
        bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "üí∏–ö—É–ø–∏—Ç—å R$üí∏", callback_data: "buyRobux"
                        },
                        {
                            text: "üí≤–í—ã–≤–µ—Å—Ç–∏üí≤", callback_data: "giveaway"
                        }
                    ],
                    [
                        {
                            text: "üë§–ü—Ä–æ—Ñ–∏–ª—åüë§", callback_data: "profile"
                        }
                    ],
                    [
                        {
                            text: "üßç–ü–æ–¥–¥–µ—Ä–∂–∫–∞üßç", callback_data: "helpAdmin"
                        },
                        {
                            text: "üì∞–ù–æ–≤–æ—Å—Ç–∏üì∞", callback_data: "newsChanel"
                        }
                    ],
                    [
                        {
                            text: "üí∞–ë–∞–ª–∞–Ω—Åüí∞", callback_data: "balance"
                        },
                        {
                            text: 'üè¶–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Äüè¶', callback_data: "calculator"
                        }
                    ]
                ]
            }
        }
        )
    } else if (data === "paySberbank") {
        payment = "–°–±–µ—Ä–±–∞–Ω–∫"
        bot.editMessageText(`–°–±–µ—Ä –∫–∞—Ä—Ç–∞ -> 2202 2023 4153 6872\n[–î–º–∏—Ç—Ä–∏–π –¢–∏–º–æ—Ñ–µ–µ–≤–∏—á –®.]\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à –∞–π–¥–∏!\n–í–∞—à –∞–π–¥–∏: ${chatId}\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –∂–º–∏—Ç–µ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É`, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "–Ø –æ–ø–ª–∞—Ç–∏–ª",
                            callback_data: "userOplatil"
                        }
                    ],
                    [
                        {
                            text: "–ù–∞–∑–∞–¥",
                            callback_data: "buyRobux"
                        }
                    ]
                ]
            }
        })
    } else if (data === "payTinkoff") {
        payment = "–¢–∏–Ω—å–∫–æ—Ñ—Ñ"
        bot.editMessageText(`–¢–∏–Ω—å–∫–æ—Ñ—Ñ –∫–∞—Ä—Ç–∞ -> 2200 7007 1276 5014\n[–î–º–∏—Ç—Ä–∏–π –¢–∏–º–æ—Ñ–µ–µ–≤–∏—á –®.]\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à –∞–π–¥–∏!\n–í–∞—à –∞–π–¥–∏: ${chatId}\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –∂–º–∏—Ç–µ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É`, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "–Ø –æ–ø–ª–∞—Ç–∏–ª",
                            callback_data: "userOplatil"
                        }
                    ],
                    [
                        {
                            text: "–ù–∞–∑–∞–¥",
                            callback_data: "buyRobux"
                        }
                    ]
                ]
            }
        })
    } else if (data === "payQIWI") {
        payment = "–ö–∏–≤–∏"
        bot.editMessageText(`QIWI –Ω–æ–º–µ—Ä -> +7 961 439 77 99\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à –∞–π–¥–∏!\n–í–∞—à –∞–π–¥–∏: ${chatId}\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –∂–º–∏—Ç–µ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É`, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "–Ø –æ–ø–ª–∞—Ç–∏–ª",
                            callback_data: "userOplatil"
                        }
                    ],
                    [
                        {
                            text: "–ù–∞–∑–∞–¥",
                            callback_data: "buyRobux"
                        }
                    ]
                ]
            }
        })
    } else if (data === "payKaspi") {
        payment = "–ö–∞—Å–ø–∏"
        bot.editMessageText(`KASPIBANK –Ω–æ–º–µ—Ä -> +7 708 987 95 12\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à –∞–π–¥–∏!\n–í–∞—à –∞–π–¥–∏: ${chatId}\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –∂–º–∏—Ç–µ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É`, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "–Ø –æ–ø–ª–∞—Ç–∏–ª",
                            callback_data: "userOplatil"
                        }
                    ],
                    [
                        {
                            text: "–ù–∞–∑–∞–¥",
                            callback_data: "buyRobux"
                        }
                    ]
                ]
            }
        })
    } else if (data === "userOplatil") {
        bot.editMessageText(`–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! \n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–∏ 3-—Ö —á–∞—Å–æ–≤!`, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
                            callback_data: "backToMenu"
                        }
                    ]
                ]
            }
        })
        bot.sendMessage(809124390, `–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}, –Ω–∞ —Å—É–º–º—É ${costnumber}\n–û–ø–ª–∞—Ç–∞ –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞ —á–µ—Ä–µ–∑ ${payment}`)
    } else if (data === "gamepassCostCalculator") {
    } else if (data === "gamepassCostCalculator") {
    } else if (data === "vivodDa") {
        bot.editMessageText(`–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –≤—ã–≤–æ–¥–∏—Ç—å ${vivodNumber} —Ä–æ–±—É–∫—Å–æ–≤! \n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥–µ–π–º–ø–∞—Å—Å:`, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
                            callback_data: "backToMenu"
                        }
                    ]
                ]
            }
        })
    }
})
bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    if (msg.text === "–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—é") {
        bot.sendMessage(chatId, "–í–æ—Ç –º–æ–µ –º–µ–Ω—é:", Keyboard)
    }
    if (chatState[chatId] === "waitMoneyAmount") {
        if (msg.text === msg.text) {
            if (msg.text > 0) {
                const number = msg.text
                costnumber = number * 0.59
                chatState[chatId] = "waitMoneyAmount"
                const keyboardPayments = {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: "–°–±–µ—Ä–±–∞–Ω–∫", callback_data: "paySberbank"
                                },
                                {
                                    text: "–¢–∏–Ω—å–∫–æ—Ñ—Ñ", callback_data: "payTinkoff"
                                }
                            ],
                            [
                                {
                                    text: "QIWI –∫–æ—à–µ–ª—å–µ–∫", callback_data: "payQIWI"
                                }
                            ],
                            [
                                {
                                    text: "KaspiBank [—Ç–µ–Ω–≥–µ]", callback_data: "payKaspi"
                                }
                            ]
                        ]
                    }
                }
                bot.sendMessage(chatId, `–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ ${number} —Ä–æ–±—É–∫—Å–æ–≤\n–ö –æ–ø–ª–∞—Ç–µ: ${costnumber} —Ä—É–±–ª–µ–π\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:`, keyboardPayments).then(chatState[chatId] = "lol")
                return costnumber
            } else {
                bot.sendMessage(chatId, "–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ —Å—É–º–º—É –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            }
        }
    }
    else if (chatState[chatId] === "vivodMoney") {
        if (msg.text === msg.text) {
            if (msg.text > 0) {
                const number = msg.text
                vivodNumber = number * 0.59
                chatState[chatId] = "vivodMoney"
                const keyboardPayments = {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: "–î–∞", callback_data: "vivodDa"
                                }
                            ],
                            [
                                {
                                    text: "–ù–µ—Ç", callback_data: "vivodNet"
                                }
                            ]
                        ]
                    }
                }
                bot.sendMessage(chatId, `–í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ ${number} —Ä–æ–±—É–∫—Å–æ–≤?\n`, keyboardPayments).then(chatState[chatId] = "lol")
                // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ RabbitMQ
                // sendToRabbitMQ(message);
            } else {
                bot.sendMessage(chatId, "–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            }
        }
    }

})

bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const messageText = msg.text;
    if (messageId === msg.reply_to_message.message_id) {
        gamepassLink = messageText;
        bot.sendMessage(809124390, gamePassLink)
    }
});

bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const telegramUsername = msg.from.username;
    const userId = msg.from.id;
    const currentTime = new Date().toISOString();

    bot.sendMessage(chatId, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ –º–æ–µ–º –º–∞–≥–∞–∑–∏–Ω–µ —Ä–æ–±—É–∫—Å–æ–≤)\n–ù–∏–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –º–æ–µ –º–µ–Ω—é. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –í—ã–∑–≤–∞—Ç—å –º–µ–Ω—é", againMenu);
    bot.sendMessage(chatId, "–í–æ—Ç –º–æ–µ –º–µ–Ω—é:", Keyboard);

    db.get(`SELECT chatState FROM users WHERE userId = ?`, [userId], (err, row) => {
        if (err) {
            console.error(err.message);
            return;
        }

        let chatState = 'NormalUserState';

        if (row && row.chatState) {
            chatState = row.chatState;
        } else {
            db.run(`INSERT INTO users (telegramUsername, userId, timeReg) VALUES (?, ?, ?)`, [telegramUsername, userId, currentTime], function (err) {
                if (err) {
                    console.error(err.message);
                    return;
                }
                console.log(`User ${telegramUsername} (${userId}) inserted into the database.`);
            });
        }
    });
});

const Keyboard = {
    reply_markup: {
        inline_keyboard: [
            [
                {
                    text: "üí∏–ö—É–ø–∏—Ç—å R$üí∏", callback_data: "buyRobux"
                },
                {
                    text: "üí≤–í—ã–≤–µ—Å—Ç–∏üí≤", callback_data: "giveaway"
                }
            ],
            [
                {
                    text: "üë§–ü—Ä–æ—Ñ–∏–ª—åüë§", callback_data: "profile"
                }
            ],
            [
                {
                    text: "üßç–ü–æ–¥–¥–µ—Ä–∂–∫–∞üßç", callback_data: "helpAdmin"
                },
                {
                    text: "üì∞–ù–æ–≤–æ—Å—Ç–∏üì∞", callback_data: "newsChanel"
                }
            ],
            [
                {
                    text: "üí∞–ë–∞–ª–∞–Ω—Åüí∞", callback_data: "balance"
                },
                {
                    text: 'üè¶–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Äüè¶', callback_data: "calculator"
                }
            ]
        ]
    }
}
const againMenu = {
    reply_markup: {
        keyboard: [
            [{ text: '–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—é' }]
        ],
        resize_keyboard: true,
        one_time_keyboard: false,
    }
}

bot.onText(/\/addbalance (\d+) (\d+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const adminUserId = msg.from.id;
    const targetUserId = parseInt(match[1]);
    const amount = parseInt(match[2]);
    if (isAdminUser(adminUserId)) {
        // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        increaseUserBalance(targetUserId, amount, (result) => {
            if (result.success) {
                bot.sendMessage(chatId, `–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${targetUserId} —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${amount}`);
            } else {
                bot.sendMessage(chatId, `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${targetUserId}`);
            }
        });
    } else {
        bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
    }
});
bot.onText(/\/minusbalance (\d+) (\d+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const adminUserId = msg.from.id;
    const targetUserId = parseInt(match[1]);
    const amount = parseInt(match[2]);
    if (isAdminUser(adminUserId)) {
        // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        minusUserBalance(targetUserId, amount, (result) => {
            if (result.success) {
                bot.sendMessage(chatId, `–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${targetUserId} —É—Å–ø–µ—à–Ω–æ –ø–æ–Ω–∏–∂–µ–Ω –Ω–∞ ${amount}`);
            } else {
                bot.sendMessage(chatId, `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω–∏–∑–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${targetUserId}`);
            }
        });
    } else {
        bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
    }
});
bot.onText(/\/blockuser (\d+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const adminUserId = msg.from.id;
    const targetUserId = parseInt(match[1]);
    if (isAdminUser(adminUserId)) {
        blockUser(targetUserId, (result) => {
            if (result.success) {
                bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${targetUserId} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
            } else {
                bot.sendMessage(chatId, `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${targetUserId}`);
            }
        });
    } else {
        bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
    }
});


function blockUser(userId, callback) {
    db.run(
        `UPDATE users SET isBlocked = 1 WHERE userId = ?`,
        [userId],
        function (err) {
            if (err) {
                console.error(err.message);
                callback({ success: false });
            } else {
                callback({ success: true });
            }
        }
    );
}

function isAdminUser(userId) {
    const adminUserIds = [809124390, 789012];
    return adminUserIds.includes(userId);
}

function increaseUserBalance(userId, amount, callback) {
    db.run(
        `UPDATE users SET userBalance = userBalance + ? WHERE userId = ?`,
        [amount, userId],
        function (err) {
            if (err) {
                console.error(err.message);
                callback({ success: false });
            } else {
                callback({ success: true });
            }
        }
    );
}

function minusUserBalance(userId, amount, callback) {
    db.run(
        `UPDATE users SET userBalance = userBalance + ? WHERE userId = ?`,
        [amount, userId],
        function (err) {
            if (err) {
                console.error(err.message);
                callback({ success: false });
            } else {
                callback({ success: true });
            }
        }
    );
}



bot.onText(/\/support/, (msg) => {
    const chatId = msg.chat.id;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª—É–∂–±—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ö–∞–∫ –º—ã –º–æ–∂–µ–º –≤–∞–º –ø–æ–º–æ—á—å?');
});

bot.on('message', (msg) => {
    const chatId = msg.chat.id;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (msg.from && !msg.from.is_bot) {
        const userMessage = msg.text;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        handleUserMessage(chatId, userMessage);
    }
});

function handleUserMessage(chatId, message) {
    // –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç –∏–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.

    // –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (message.toLowerCase().includes('–ø—Ä–æ–±–ª–µ–º–∞')) {

        bot.sendMessage(chatId, '–ö–∞–∂–µ—Ç—Å—è, —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',);

    } else if (message.toLowerCase().includes('–≤–æ–ø—Ä–æ—Å')) {
        bot.sendMessage(chatId, '–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å, —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏–º.');
    } else {
        bot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
    }
}

bot.on('polling_error', (error) => {
    console.log(error);
});

async function sendToRabbitMQ(message) {
    try {
        const connection = await amqp.connect('amqp://YOUR_RABBITMQ_URL');
        const channel = await connection.createChannel();

        const queue = 'YOUR_QUEUE_NAME';
        const messageBuffer = Buffer.from(message);

        channel.assertQueue(queue);
        channel.sendToQueue(queue, messageBuffer);

        console.log('Message sent to RabbitMQ');
    } catch (error) {
        console.error('Failed to send message to RabbitMQ', error);
    }
}